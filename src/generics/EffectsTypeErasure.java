package generics;

/**
 * Created by Bext on 23/01/2017.
 */
public class EffectsTypeErasure {
    static class Node<T> {
        public T data;

        public Node(T data) { this.data = data; }

        public void setData(T data) {
            System.out.println("Node.setData");
            this.data = data;
        }
    }

    static class NodeExtended extends Node<Integer> {
        public NodeExtended(Integer data) { super(data); }

        //Bridge method generated by the compiler
        //public void setData(Object data) {
        //    setData((Integer)data);
        //}

        public void setData(Integer data) {
            System.out.println("NodeExtended.setData");
            super.setData(data);
        }
    }

    public static void main(String...args) {
        NodeExtended nE = new NodeExtended(5);
        Node n = nE;     // A raw type - compiler throws an unchecked warning
        n.setData("Hello");
        Integer i = nE.data;   // Causes a ClassCastException to be thrown.

        //after Type erasure code becomes
        //NodeExtended nE = new NodeExtended(5);
        //Node n = (NodeExtended)nE;     // A raw type - compiler throws an unchecked warning
        //n.setData("Hello");
        //Integer i = (String)nE.data;   // Causes a ClassCastException to be thrown.
    }
}
